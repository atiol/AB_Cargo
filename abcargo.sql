
--
-- GP_SQN
--
 CREATE SEQUENCE "GP_SQN" MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 CACHE 20 NOORDER NOCYCLE;
--
-- RECEIVER_SQN
--
 CREATE SEQUENCE "RECEIVER_SQN" MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 CACHE 10 NOORDER NOCYCLE;
--
-- SENDER_SQN
--
 CREATE SEQUENCE "SENDER_SQN" MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 CACHE 20 NOORDER NOCYCLE;
--
-- UserClaims_SEQ
--
 CREATE SEQUENCE "UserClaims_SEQ" MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 CACHE 20 NOORDER NOCYCLE;
--
-- CARGO
--
  CREATE TABLE "CARGO" 
   (	"VOLUME" NUMBER(6,2),
	"WEIGHT" NUMBER(6,2),
	"FEE" NUMBER(6,2),
	"TRACKING_NO" NUMBER NOT NULL ENABLE,
	"SENT_DATE" DATE NOT NULL ENABLE,
	"DESCRIPTION" VARCHAR2(100),
	"STATUS_ID" NUMBER NOT NULL ENABLE,
	"SENDER_ID" NUMBER NOT NULL ENABLE,
	PRIMARY KEY ("TRACKING_NO") ENABLE
   );
--
-- CARGO_STATUS
--
  CREATE TABLE "CARGO_STATUS" 
   (	"STATUS_ID" NUMBER DEFAULT 200 NOT NULL ENABLE,
	"MESSAGE" VARCHAR2(50),
	PRIMARY KEY ("STATUS_ID") ENABLE
   );
--
-- LOCATION
--
  CREATE TABLE "LOCATION" 
   (	"CITY_ID" NUMBER NOT NULL ENABLE,
	"CITY_NAME" VARCHAR2(20) NOT NULL ENABLE,
	PRIMARY KEY ("CITY_ID") ENABLE
   );
--
-- RECEIVER
--
  CREATE TABLE "RECEIVER" 
   (	"FIRST_NAME" VARCHAR2(20) NOT NULL ENABLE,
	"ADDRESS" VARCHAR2(50) NOT NULL ENABLE,
	"PHONE" VARCHAR2(11) NOT NULL ENABLE,
	"SENDER_ID" NUMBER NOT NULL ENABLE,
	"LAST_NAME" VARCHAR2(20) NOT NULL ENABLE,
	"CITY" VARCHAR2(20),
	"RECEIVER_ID" NUMBER NOT NULL ENABLE,
	PRIMARY KEY ("RECEIVER_ID") ENABLE
   );
--
-- Roles
--
  CREATE TABLE "Roles" 
   (	"Id" NVARCHAR2(128) NOT NULL ENABLE,
	"Name" NVARCHAR2(256) NOT NULL ENABLE,
	PRIMARY KEY ("Id") ENABLE
   );
--
-- SENDER
--
  CREATE TABLE "SENDER" 
   (	"TC" NUMBER NOT NULL ENABLE,
	"FIRST_NAME" VARCHAR2(20) NOT NULL ENABLE,
	"ADDRESS" VARCHAR2(50),
	"LAST_NAME" VARCHAR2(20) NOT NULL ENABLE,
	"PHONE" VARCHAR2(11) NOT NULL ENABLE,
	"CITY" VARCHAR2(50),
	"S_ID" NUMBER NOT NULL ENABLE,
	CONSTRAINT "SENDER_PK" PRIMARY KEY ("S_ID") ENABLE
   );
--
-- SUBSCRIBERS
--
  CREATE TABLE "SUBSCRIBERS" 
   (	"ID" NUMBER NOT NULL ENABLE,
	"NAME" VARCHAR2(50) NOT NULL ENABLE,
	"EMAIL" VARCHAR2(50) NOT NULL ENABLE
   );
--
-- USER_MESSAGES
--
  CREATE TABLE "USER_MESSAGES" 
   (	"NAME" VARCHAR2(50) NOT NULL ENABLE,
	"EMAIL" VARCHAR2(50) NOT NULL ENABLE,
	"MESSAGE" VARCHAR2(500) NOT NULL ENABLE,
	"SENT" DATE DEFAULT NULL NOT NULL ENABLE,
	"ID" NUMBER NOT NULL ENABLE,
	PRIMARY KEY ("ID") ENABLE
   );
--
-- UserClaims
--
  CREATE TABLE "UserClaims" 
   (	"Id" NUMBER(10,0) NOT NULL ENABLE,
	"UserId" NVARCHAR2(128) NOT NULL ENABLE,
	"ClaimType" NVARCHAR2(256),
	"ClaimValue" NVARCHAR2(256),
	PRIMARY KEY ("Id") ENABLE
   );
--
-- UserLogins
--
  CREATE TABLE "UserLogins" 
   (	"LoginProvider" NVARCHAR2(128) NOT NULL ENABLE,
	"ProviderKey" NVARCHAR2(128) NOT NULL ENABLE,
	"UserId" NVARCHAR2(128) NOT NULL ENABLE,
	PRIMARY KEY ("LoginProvider","ProviderKey","UserId") ENABLE
   );
--
-- UserRoles
--
  CREATE TABLE "UserRoles" 
   (	"UserId" NVARCHAR2(128) NOT NULL ENABLE,
	"RoleId" NVARCHAR2(128) NOT NULL ENABLE,
	PRIMARY KEY ("UserId","RoleId") ENABLE
   );
--
-- Users
--
  CREATE TABLE "Users" 
   (	"Id" NVARCHAR2(128) NOT NULL ENABLE,
	"Email" NVARCHAR2(256),
	"EmailConfirmed" NUMBER(1,0) NOT NULL ENABLE,
	"PasswordHash" NVARCHAR2(256),
	"SecurityStamp" NVARCHAR2(256),
	"PhoneNumber" NVARCHAR2(256),
	"PhoneNumberConfirmed" NUMBER(1,0) NOT NULL ENABLE,
	"TwoFactorEnabled" NUMBER(1,0) NOT NULL ENABLE,
	"LockoutEndDateUtc" TIMESTAMP(7),
	"LockoutEnabled" NUMBER(1,0) NOT NULL ENABLE,
	"AccessFailedCount" NUMBER(10,0) NOT NULL ENABLE,
	"UserName" NVARCHAR2(256) NOT NULL ENABLE,
	"UserPhoto" BLOB,
	PRIMARY KEY ("Id") ENABLE
   );
--
-- GET_CITIES
--
CREATE OR REPLACE VIEW "GET_CITIES" 
  AS 
  SELECT CITY_NAME FROM LOCATION;
--
-- AUTO_INCRE_TRG
--
  CREATE OR REPLACE TRIGGER "AUTO_INCRE_TRG"
  BEFORE INSERT ON "SUBSCRIBERS"FOR EACH ROW
  BEGIN -- executable part starts here
	SELECT GP_SQN.NEXTVAL INTO :NEW.ID FROM DUAL;
END;
/
--
-- BI_INQUIRIES
--
  CREATE OR REPLACE TRIGGER "BI_INQUIRIES"
  BEFORE INSERT ON "USER_MESSAGES"FOR EACH ROW
  BEGIN
	SELECT GP_SQN.NEXTVAL INTO :NEW.ID FROM DUAL;
END;
/
--
-- RECEIVER_AUTOINCRE_TRG
--
  CREATE OR REPLACE TRIGGER "RECEIVER_AUTOINCRE_TRG"
  BEFORE INSERT ON "RECEIVER"FOR EACH ROW
  BEGIN

  SELECT RECEIVER_SQN.NEXTVAL INTO :NEW.RECEIVER_ID FROM DUAL;

END;
/
--
-- SENDER_AUTOINCRE_TRG
--
  CREATE OR REPLACE TRIGGER "SENDER_AUTOINCRE_TRG"
  BEFORE INSERT ON "SENDER"FOR EACH ROW
  BEGIN -- executable part starts here
	SELECT SENDER_SQN.NEXTVAL INTO :NEW.S_ID FROM DUAL;
END;
/
--
-- TRACKING_NO_TRG
--
  CREATE OR REPLACE TRIGGER "TRACKING_NO_TRG"
  BEFORE INSERT ON "CARGO"FOR EACH ROW
  DECLARE
    V_RANDOM NUMBER;
    V_CURR_DATE DATE := SYSDATE;
BEGIN -- executable part starts here
    V_RANDOM := round(DBMS_RANDOM.VALUE(10000000, 99999999), 0);

	:NEW.TRACKING_NO := :NEW.SENDER_ID + V_RANDOM;
    :NEW.FEE := (:NEW.VOLUME * :NEW.WEIGHT / 5);
    :NEW.SENT_DATE := V_CURR_DATE;
	:NEW.STATUS_ID := 200;
END;
/
--
-- SENDER_PK
--
  CREATE UNIQUE INDEX "SENDER_PK" ON "SENDER" ("S_ID");
--
-- SUBSCRIBERS_PK_INDEX
--
  CREATE UNIQUE INDEX "SUBSCRIBERS_PK_INDEX" ON "SUBSCRIBERS" ("ID");
--
-- SUBSCRIBERS_PK
--
ALTER TABLE "SUBSCRIBERS" ADD CONSTRAINT "SUBSCRIBERS_PK" PRIMARY KEY ("ID") ENABLE;

--
-- SYS_C0011620
--
ALTER TABLE "CARGO" ADD  FOREIGN KEY ("STATUS_ID") REFERENCES "CARGO_STATUS"("STATUS_ID") ENABLE;

--
-- SYS_C0011659
--
ALTER TABLE "CARGO" ADD  FOREIGN KEY ("SENDER_ID") REFERENCES "SENDER"("S_ID") ENABLE;

--
-- SYS_C0011660
--
ALTER TABLE "RECEIVER" ADD  FOREIGN KEY ("SENDER_ID") REFERENCES "SENDER"("S_ID") ENABLE;

--
-- FK_UserClaims_Users
--
ALTER TABLE "UserClaims" ADD CONSTRAINT "FK_UserClaims_Users" FOREIGN KEY ("UserId") REFERENCES "Users"("Id") ON DELETE CASCADE ENABLE;

--
-- FK_UserLogins_Users
--
ALTER TABLE "UserLogins" ADD CONSTRAINT "FK_UserLogins_Users" FOREIGN KEY ("UserId") REFERENCES "Users"("Id") ON DELETE CASCADE ENABLE;

--
-- FK_UserRoles_Roles
--
ALTER TABLE "UserRoles" ADD CONSTRAINT "FK_UserRoles_Roles" FOREIGN KEY ("RoleId") REFERENCES "Roles"("Id") ON DELETE CASCADE ENABLE;

--
-- FK_UserRoles_Users
--
ALTER TABLE "UserRoles" ADD CONSTRAINT "FK_UserRoles_Users" FOREIGN KEY ("UserId") REFERENCES "Users"("Id") ON DELETE CASCADE ENABLE;

--
-- ADD_CARGO
--
CREATE OR REPLACE PROCEDURE "ADD_CARGO" (
  "WEIGHT_" IN NUMBER, 
  "VOLUME_" IN NUMBER, 
  "SENDERID_" IN NUMBER, 
  "DESCRIPTION_" IN VARCHAR2) AUTHID CURRENT_USER IS


BEGIN -- executable part starts here
	INSERT INTO CARGO(WEIGHT, VOLUME, SENDER_ID, DESCRIPTION)
	VALUES (WEIGHT_, VOLUME_, SENDERID_, DESCRIPTION_);
END;
/
--
-- ADD_RECEIVER
--
CREATE OR REPLACE PROCEDURE "ADD_RECEIVER" (
  "FN_" IN VARCHAR2, 
  "LN_" IN VARCHAR2, 
  "ADDRESS_" IN VARCHAR2, 
  "CITY_" IN VARCHAR2, 
  "PHONE_" IN VARCHAR2) IS

BEGIN 
	
	INSERT INTO RECEIVER(FIRST_NAME, LAST_NAME, ADDRESS, CITY, PHONE)
	VALUES(FN_, LN_, ADDRESS_, CITY_, PHONE_);

END;
/
--
-- ADD_SENDER
--
CREATE OR REPLACE PROCEDURE "ADD_SENDER" (
  "TC_" IN NUMBER, 
  "FN_" IN VARCHAR2, 
  "LN_" IN VARCHAR2, 
  "ADDRESS_" IN VARCHAR2, 
  "CITY_" IN VARCHAR2, 
  "PHONE_" IN VARCHAR2) IS

BEGIN -- executable part starts here
	
	INSERT INTO SENDER(TC, FIRST_NAME, LAST_NAME, ADDRESS, CITY, PHONE)
	VALUES(TC_, FN_, LN_, ADDRESS_, CITY_, PHONE_);
END;
/
--
-- GET_TRACK_INFO
--
CREATE OR REPLACE PROCEDURE "GET_TRACK_INFO" (
  "TRACKINGID_" IN NUMBER,
  "SENDER_FN" OUT VARCHAR2, 
  "SENDER_LN" OUT VARCHAR2, 
  "RECEIVER_FN" OUT VARCHAR2, 
  "RECEIVER_LN" OUT VARCHAR2, 
  "CARGO_STATUS" OUT VARCHAR2,
  "SENT_" OUT DATE,
  "DESCRIPTION_" OUT VARCHAR2) AUTHID CURRENT_USER IS

BEGIN
	SELECT S.FIRST_NAME, S.LAST_NAME, R.FIRST_NAME, R.LAST_NAME, CS.MESSAGE, C.SENT_DATE, C.DESCRIPTION INTO SENDER_FN, SENDER_LN, RECEIVER_FN, RECEIVER_LN, CARGO_STATUS, SENT_, DESCRIPTION_
	FROM SENDER S, RECEIVER R, CARGO C, CARGO_STATUS CS
	WHERE C.TRACKING_NO = TRACKINGID_ AND C.SENDER_ID = S.S_ID AND R.SENDER_ID = S.S_ID AND C.STATUS_ID = CS.STATUS_ID;

	DBMS_OUTPUT.PUT_LINE('SENDER : '|| SENDER_FN ||', DATE : ' || SENT_);
END;
/
